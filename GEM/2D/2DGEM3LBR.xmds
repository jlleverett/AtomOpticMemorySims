<simulation xmds-version="2">
	<name>2DGEM3LBR</name>
	<author>Jesse</author>
	<description> 3 level gradient echo memory simulation. Solves the 3-level Maxwell-Bloch equations for a 2D ensemble of 
	stationary atoms under a classical plane wave control field at an angle 'ang' in radians, and a weak probe with waist 'waist' in metres
	
	The waist is defined for the amplitude rather than intensity of the probe optical field.
	
	Here we include a second counter-propagating control field that generates a second probe, allowing for backward recall.
	The secular approximation is made, where each probe couples to the spinwave only by the co-propagating control field.
	We also include here symmetric detuning of the two pairs of fields to improve time-reversal on recall.
	</description>
<features>
	<benchmark />
	<bing />
	<globals>
		<![CDATA[
		const double pi = M_PI;
		double agamma = pi; 		/* excited state coherence decay (half the excited state linewidth, set to pi means all frequencies in terms of linewidth */
		complex delta;  		/* one-photon detuning*/
		double omega;		/*control field rabi frequency*/
		complex omf;
		complex omb;
		double eta;   		/*operator for gradient*/		
		double od; 
		double bandwidth;
		const double memlength = 0.03; // memory length in metres. Make sure you set z domain accordingly
		const double ml2 = memlength/2.0;
		
		const double kp = 2*pi / (795.014e-9); // use metres in these simulations. easier to keep track of wavelengths and k vectors
        const double kc = 2*pi/ (795e-9);  // remember that k'dimension' are reserved eg kz, ky.
        
        double kcfz;
        double kcfy;
        double kcbz;
        double kcby;
        
        double zr; // rayleigh length
        double wz; // waist at memory end
        
        

		double gradientswitch(double time){
  if (time < 5) { return 1.0; }
  else {return -1.0; }}
  
  		double controlfswitch(double time){
  if (time < 4) { return 1.0; }
  else {return 0.0; }}
  
  		double controlbswitch(double time){
  if (time < 6) { return 0.0; }
  else {return 1.0; }}
  
        double roco( double zz, double ww){ // one on radius of curvature of gaussian beam
  if (zz == 0) { return 0; } // because we can't handle 0/0
  else { return 1.0/(zz*(1+pow(pi*ww*ww/(zz*795e-9),2))); }}

		double gaussian( double x, double w ) { return exp( -2 * pow(x,2) / pow(w,2) ); }
		]]>
	</globals>
	<arguments append_args_to_output_filename="yes">
		<argument default_value= "2.8" name = "tin" type = "real" />
		<argument default_value= "1.2" name = "pulsewidth" type = "real" />
		<argument default_value= "1" name = "bandwidth_in" type = "real" />
		<argument default_value= "1000" name = "od_in" type = "real" />
		<argument default_value= "8" name = "omega_in" type = "real" />
		<argument default_value= "200" name = "delta_in" type = "real" />
		<argument default_value= "0.0001" name = "waist" type = "real" />
		<argument default_value= "0.006006" name = "angf" type = "real" />
		<argument default_value= "0.006006" name = "angb" type = "real" />
		<![CDATA[
		omega = 2*pi*omega_in;
		delta = 2*pi*delta_in;
		od = od_in / memlength; // we use length in metres so set od_in as absolute od
		bandwidth = bandwidth_in / memlength; // similarly for bandwidth
		zr = kp * waist*waist / 2.0;
		wz = waist*sqrt(1+pow(ml2/zr,2)); // waist at edge of memory
		kcfz = cos(angf) * kc;
		kcfy = sin(angf) * kc;
		kcbz = cos(angb) * kc;
		kcby = sin(angb) * kc; // angles are measured in the direction of travel of the control field
		]]>
	</arguments>
</features>
<geometry>
	<propagation_dimension>t</propagation_dimension>
	<transverse_dimensions>
	<dimension name="z" lattice="100" domain="(-0.015, 0.015)" />
    <dimension name="y" lattice="40"  domain="(-0.0002, 0.0002)" />
	</transverse_dimensions>
</geometry>

<vector initial_space="z y" name="spinwave" type="complex">
	<components>S Pf Pb</components>
</vector>

<vector initial_space="z y" name="forwardprobe" type="complex">
	<components>Ef</components>
</vector>

<vector initial_space="z y" name="backwardprobe" type="complex">
	<components>Eb</components>
</vector>

<vector initial_space="z y" name="controlphase" type="complex">
	<components>forwardphase backwardphase</components>
	<initialisation>
        <![CDATA[
        forwardphase  = exp(i * ((kcfz-kp)*z+kcfy*y));
        backwardphase = exp(i * ((kp-kcbz)*z+kcby*y));
        ]]>
    </initialisation>
</vector>

<sequence>
	<integrate algorithm="ARK45" interval="10" steps="200" tolerance="1.0e-6">
	<samples>200</samples>
	
	<operators>   
		<operator kind="functions">
		<![CDATA[
		omf = controlfswitch(t)*omega;
		omb = controlbswitch(t)*omega;
		eta = 2*pi*bandwidth * gradientswitch(t); /* placing within the operators simplifies time dependence easier and omits it from the often long Maxwell-Bloch eqs*/
		]]>
		</operator>
		
		<operator kind="cross_propagation" algorithm="RK4"  propagation_dimension="z">
            <operator kind="ip" constant="yes">
              <operator_names>Ltt</operator_names>
              <![CDATA[
                Ltt = i*(ky*ky)/(2*kp); // This gives the probe beam accurate 2D divergence
              ]]>
            </operator>	
            	     
			<integration_vectors> forwardprobe </integration_vectors>
			<dependencies>spinwave</dependencies>
			<boundary_condition kind="left">
				<![CDATA[
				Ef= gaussian(t-tin,pulsewidth) * waist/wz*exp(-y*y/(wz*wz))*exp(-i*(kp*y*y*roco(-ml2,waist)/2.0-atan(-ml2/zr))) ; 
				]]>
			</boundary_condition>
			<![CDATA[
			dEf_dz = i * sqrt(od) * Pf + Ltt[Ef];
			]]>
			</operator>
		
		<operator kind="cross_propagation" algorithm="RK4"  propagation_dimension="z">
            <operator kind="ip" constant="yes">
              <operator_names>Ltt</operator_names>
              <![CDATA[
                Ltt = i*(ky*ky)/(2*kp); // This gives the probe beam accurate 2D divergence
              ]]>
            </operator>			
			<integration_vectors> backwardprobe </integration_vectors>
			<dependencies>spinwave</dependencies>
			<boundary_condition kind="right">
				<![CDATA[
				Eb= 0; 
				]]>
			</boundary_condition>
			<![CDATA[
			dEb_dz = - i * sqrt(od) * Pb + Ltt[Eb];
			]]>
		</operator>

			<integration_vectors>spinwave</integration_vectors>
			<dependencies>forwardprobe backwardprobe controlphase</dependencies>
				<![CDATA[
				dPf_dt = (-agamma + i * delta) * Pf + i * conj(omf*forwardphase) * S + i*agamma*sqrt(od)*Ef;
				dPb_dt = (-agamma - i * delta) * Pb + i * conj(omb*backwardphase) * S + i*agamma*sqrt(od)*Eb;
				dS_dt = i * eta * z * S + i * omf * forwardphase * Pf + i * omb * backwardphase * Pb + i*((omf*conj(omf)-omb*conj(omb))*(delta+agamma)/(agamma*agamma + delta*delta))*S;
			]]>
	</operators>
	</integrate>
</sequence>

<output filename="2DGEM3LBR" format="hdf5">
	<group>
	<sampling basis="z y" initial_sample="yes">
		<moments>SR SI PfR PfI PbR PbI EfR EfI EbR EbI</moments>
		<dependencies>forwardprobe backwardprobe spinwave</dependencies>
		<![CDATA[
		_SAMPLE_COMPLEX(S);
		_SAMPLE_COMPLEX(Ef);
		_SAMPLE_COMPLEX(Pf);
		_SAMPLE_COMPLEX(Eb);
		_SAMPLE_COMPLEX(Pb);		
		]]>
	</sampling>
	</group>
</output>
</simulation>